import { type Actions, fail } from "@sveltejs/kit";
let userError = false

const payloadError = {
    firstname: "",
    lastname: "",
    organization: "",
    email: "",
    password: ""
}

export const actions = ({
    default: async ({ request, locals }) => {
        // On formatte les données envoyées par l'utilisateur
        const formData = await request.formData()

        // De ces données, on récupère les informations d'inscription de l'utilisateur
        const employer = {
            firstname: formData.get("firstname") as string,
            lastname: formData.get("lastname") as string,
            organization: formData.get("organization") as string,
            email: formData.get("email") as string,
            password: formData.get("password") as string
        }
        // Do verification here !
        // On test tout d'abord que les informations saisies par l'utlistaur ne sont pas vide !
        if (!employer.firstname || !employer.lastname || !employer.organization || !employer.email || !employer.password) {
            userError = true;
            if (!employer.firstname)
                payloadError.firstname = "Le nom de famille ne peut être vide"
            if (!employer.lastname)
                payloadError.lastname = "Le prénom de peut être vide"
            if (!employer.organization)
                payloadError.organization = "Le nom de l'organisation ne peut être vide"
            if (!employer.email)
                payloadError.email = "L'adresse email ne peut être vide"
            if (!employer.password)
                payloadError.password = "Le mot de passe ne peut être vide"
        } else {
            // On test ensuite si les mêmes informations fournies par l'utilisateur sont valides
            const namePattern = /^[a-zA-Z-' ]+$/
            const emailPattern = /^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/
            const passwordPattern = /^(?=.*[A-Z])(?=.*[a-z])(?=.*[0-9])(?=.*[^a-zA-Z0-9])(?!^[0-9]*$)(?!^[a-zA-Z]*$).{8,}$/

            if (!namePattern.test(employer.firstname)) {
                userError = true
                payloadError.firstname = "Le nom de famille est invalide"
            } else {
                userError = false
                payloadError.firstname = ""
            }

            if (!namePattern.test(employer.lastname)) {
                userError = true
                payloadError.lastname = "Le prénom est invalide"
            } else {
                payloadError.lastname = ""
                userError = false
            }

            if (!namePattern.test(employer.organization)) {
                userError = true
                payloadError.organization = "Le nom de l'organisation est invalide"
            } else {
                payloadError.organization = ""
                userError = false
            }

            if (!emailPattern.test(employer.email)) {
                userError = true
                payloadError.email = "L'adresse email est invalide"
            }
            else {
                payloadError.email = ""
                userError = false
            }

            if (!passwordPattern.test(employer.password)) {
                userError = true
                payloadError.password = "Le mot de passe est invalide"
            } else {
                payloadError.password = ""
                userError = false
            }

        }

        if (userError) {
            return fail(400, {
                payload: { ...employer },
                payloadError: { ...payloadError }
            })
        } else {
            // check if organization name is available !
            let recordUser, recordOrganization;
            try {
                recordUser = await locals.pb.collection("users").getFirstListItem(`email="${employer.email}"`)
            } catch (e) {
                if (e.status == 404) {
                    // Le nom d'utilisateur est dipsonible ! 
                    try {
                        // Check if email is available
                        recordOrganization = await locals.pb.collection("organizations").getFirstListItem(`name="${employer.organization}"`)
                    } catch (e) {
                        if (e.status == 404) {
                            // Le nom d'utilisateur et le nom de la company sont dispo
                            console.log("ON COMMENCE L4INSERTION...");

                            // TODO: Insertion dans la base de données.
                        }
                    }

                }

                if (recordUser || recordOrganization) {
                    console.log("L'orga existe");

                    return fail(401, {})
                }
            }


            // Create the user account and company here and send data back to the user
            // send the email verification request
            return {
                success: true
            }
        }
    }
}) satisfies Actions